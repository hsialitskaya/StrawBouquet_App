apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mychart.keycloakName" . }}
  labels:
    app: keycloak
spec:
  replicas: {{ .Values.keycloak.replicaCount }}
  selector:
    matchLabels:
      app: keycloak
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      containers:
        - name: keycloak
          image: "{{ .Values.keycloak.image }}:{{ .Values.keycloak.tag }}"
          ports:
            - containerPort: 8080
          args:
            - start-dev
            - --import-realm
          env:
            - name: KC_HEALTH_ENABLED
              value: "true"
            - name: KC_HOSTNAME
              valueFrom:
                configMapKeyRef:
                  name: keycloak-config
                  key: hostname
            - name: KEYCLOAK_ADMIN
              valueFrom:
                secretKeyRef:
                  name: keycloak-secret
                  key: admin-user
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-secret
                  key: admin-password
          livenessProbe:
            exec:
              command:
                - "exec 3<>/dev/tcp/127.0.0.1/8080;echo -e 'GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n' >&3;if [ $? -eq 0 ]; then echo 'Healthcheck Successful';exit 0;else echo 'Healthcheck Failed';exit 1;fi;"
            failureThreshold: 3
            periodSeconds: 60
            timeoutSeconds: 20
          volumeMounts:
            - name: keycloak-data
              mountPath: /opt/keycloak/data
      volumes:
        - name: keycloak-data
          persistentVolumeClaim:
            claimName: keycloak-pvc
      restartPolicy: Always
